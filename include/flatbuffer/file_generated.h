// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FILE_PASSXTENDED_PROTOS_H_
#define FLATBUFFERS_GENERATED_FILE_PASSXTENDED_PROTOS_H_

#include "flatbuffers/flatbuffers.h"

namespace passxtended {
namespace protos {

struct file;

struct file FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4,
    VT_FILENAME = 6
  };
  const flatbuffers::Vector<int8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_DATA);
  }
  const flatbuffers::String *filename() const {
    return GetPointer<const flatbuffers::String *>(VT_FILENAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           VerifyOffset(verifier, VT_FILENAME) &&
           verifier.VerifyString(filename()) &&
           verifier.EndTable();
  }
};

struct fileBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<int8_t>> data) {
    fbb_.AddOffset(file::VT_DATA, data);
  }
  void add_filename(flatbuffers::Offset<flatbuffers::String> filename) {
    fbb_.AddOffset(file::VT_FILENAME, filename);
  }
  explicit fileBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  fileBuilder &operator=(const fileBuilder &);
  flatbuffers::Offset<file> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<file>(end);
    return o;
  }
};

inline flatbuffers::Offset<file> Createfile(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> data = 0,
    flatbuffers::Offset<flatbuffers::String> filename = 0) {
  fileBuilder builder_(_fbb);
  builder_.add_filename(filename);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<file> CreatefileDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int8_t> *data = nullptr,
    const char *filename = nullptr) {
  auto data__ = data ? _fbb.CreateVector<int8_t>(*data) : 0;
  auto filename__ = filename ? _fbb.CreateString(filename) : 0;
  return passxtended::protos::Createfile(
      _fbb,
      data__,
      filename__);
}

inline const passxtended::protos::file *Getfile(const void *buf) {
  return flatbuffers::GetRoot<passxtended::protos::file>(buf);
}

inline const passxtended::protos::file *GetSizePrefixedfile(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<passxtended::protos::file>(buf);
}

inline bool VerifyfileBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<passxtended::protos::file>(nullptr);
}

inline bool VerifySizePrefixedfileBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<passxtended::protos::file>(nullptr);
}

inline void FinishfileBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<passxtended::protos::file> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedfileBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<passxtended::protos::file> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace protos
}  // namespace passxtended

#endif  // FLATBUFFERS_GENERATED_FILE_PASSXTENDED_PROTOS_H_
